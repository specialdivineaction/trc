package edu.tamu.tcat.trc.resolver;

import java.net.URI;

/**
 * Maintains a registry of {@link EntryResolver}s for the various entry types
 * defined by the system.
 */
public interface EntryResolverRegistry
{
   // TODO how to handle multiple matching registrations?

   /**
    * @param ref An {@link EntryId} for which to obtain a resolver
    * @return An {@link EntryResolver} that accepts the supplied reference.
    * @throws InvalidReferenceException If no registered resolver accepts
    *       the supplied reference.
    */
   <T> EntryResolver<T> getResolver(EntryId ref) throws InvalidReferenceException;


   /**
    * @param entry An TRC entry instance for which to obtain a resolver
    * @return An {@link EntryResolver} that accepts the supplied entry.
    * @throws InvalidReferenceException If no registered resolver accepts
    *       the supplied entry.
    */
   <T> EntryResolver<T> getResolver(T entry);

   /**
    *
    * @param ref An entry ref to tokenize
    * @return An opaque token that can be used to restore this reference.
    */
   String tokenize(EntryId ref);

   /**
    * @param token A token to decode as generated by {@link #tokenize(EntryId)}
    * @return The decoded entry reference for this token.
    * @throws IllegalArgumentException If the supplied token cannot be parsed.
    * @throws InvalidReferenceException If the decoded reference is not associated with
    *    a registered {@link EntryResolver}
    */
   EntryId decodeToken(String token) throws IllegalArgumentException, InvalidReferenceException;

   /**
    * @param eId A typed entry identifier
    * @return An {@link EntryReference} for the given entry id.
    */
   <T> EntryReference<T> getReference(EntryId eId) throws InvalidReferenceException;

   /**
    * @param token An opaque entry id token.
    *
    * @return An {@link EntryReference} for the given token.
    * @throws IllegalArgumentException If the supplied token cannot be parsed.
    * @throws InvalidReferenceException If the decoded reference is not associated with
    *    a registered {@link EntryResolver}
    */
   <T> EntryReference<T> getReference(String token) throws IllegalArgumentException, InvalidReferenceException;

   /**
    * @param token A URI of an entry reference to retrieve.
    *
    * @return An {@link EntryReference} for the given URI.
    * @throws InvalidReferenceException If the URI does cannot be resolved to an {@link EntryReference}.
    */
   <T> EntryReference<T> getReference(URI uri);

   /**
    * @param entry An TRC entry instance for which to obtain a reference
    * @return An {@link EntryReference} for the supplied entry.
    * @throws InvalidReferenceException If no registered resolver accepts
    *       the supplied entry.
    */
   <T> EntryReference<T> getReference(T entry);
}
