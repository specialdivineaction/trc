package edu.tamu.tcat.trc.repo;

import java.util.UUID;
import java.util.function.Consumer;
import java.util.function.Function;

/**
 * Records a set of changes to be applied to an object. This is intended to be used as
 * an implementation detail by edit commands to simplify the logic of updating storage
 * layer DTOs in the context of the TRC Document Repository.
 *
 * @param <Type> The type of object to be modified by this {@code ChangeSet}. This is
 *       intended to be a struct that will be directly modified when the change set is
 *       applied to an initial object.
 */
public interface ChangeSet<Type>
{
   // TODO we need to provide the supplied mutator with more support to document
   //      specifically what changes were made and to indicate if the changes were
   //      successful or not. Also not that it would be desirable to have the
   //      ability to apply individual changes selectively (e.g., only change this
   //      property if it has not been modified since I saw it), etc. Currently,
   //      this simply overwrites any changes. This will require a more robust notion
   //      of properties.
   //
   //      Also note that some actions should over-write previous actions (e.g. don't need to
   //      update the same name field three times, just apply the last one.

   /**
    * Adds a new change action for a property.
    *
    * @param message An brief message describing the change action to be applied. Intended
    *    for logging and audit purposes rather than display.
    * @param mutatorFn A consumer that will accept a DTO and modify
    * @return A {@link ChangeAction} that characterizes the specific change to be applied.
    */
   ChangeAction add(String message, Consumer<Type> mutatorFn);

   default <X> ChangeAction add(String property, String action, X original, Function<Type, X> mutatorFn)
   {
      // TODO use ChangeActionContext type to supply original value, property, etc and to use to
      //      set the updated and/or indicate if the change was not applied.
      throw new UnsupportedOperationException();
   }

   /**
    * Creates a change set that edits a sub-property of the parent entry, for example, an
    * address associated with a customer. Note that this allows for hierarchical combinations
    * of change sets to arbitrary levels of depth.
    *
    * <p>
    * This is intended specifically to support the notion of a Mutator generated by an Edit
    * Command, but may be useful in other contexts as well.
    *
    * @param message A prefix message that describes the property being updated. This message
    *       will prepended to all actions created by the returned {@code ChangeSet}.
    * @param selector A function that, given an instance of the parent type, will return
    *       identify and return an instance of the sub-type (for example, the mailing
    *       address of a customer).
    * @return A {@code ChagneSet} scoped to the object returned by the selector. The
    *       {@link ChangeAction}s added using the partial change set will be added
    */
   <SubType> ChangeSet<SubType> partial(String message, Function<Type, SubType> selector);

   /**
    * Extends the {@link ChangeSet} interface to allow changes to be directly applied to
    * a DTO to be modified.
    *
    * @param <Type> The type of DTO to be modified.
    */
   public interface ApplicableChangeSet<Type> extends ChangeSet<Type>
   {
      /**
       * Applies the changes from this set to the supplied DTO. The supplied
       * instance will be modified directly and returned.
       *
       * @param dto The object to modify.
       * @return The modified object.
       */
      Type apply(Type dto);
   }

   /**
    * Characterizes a particular change action. Typically this involves modifying the value of
    * a single field but could be more complex.
    */
   public interface ChangeAction
   {
      /**
       * @return A unique identifier for this particular change action
       */
      UUID getId();

      /**
       * @return A message (typically just an identifier for the property being modified)
       *       that breifly summarizes this action.
       */
      String getMessage();
   }
}